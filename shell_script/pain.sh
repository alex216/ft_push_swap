#!/bin/bash
NBR_COUNT=500
##
# NBR=$(seq 1 $NBR_COUNT | sort -R | tr '\n' ' ' | rev | cut -c 2- | rev)
# NBR="5 7 2 3"
# NBR="6 5 2 1 4 3"
# NBR="6 5 3 4 1 2"
# NBR="2 3 0 1 -1"
# NBR="1 2 3 4 5 6 7 8 10 9"
NBR="12 10 8 6 4 2 15 1 3 5 7 9 11 13"
# 100
# NBR="100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1"
# NBR="100 82 52 53 27 21 56 34 20 96 26 12 95 16 22 65 75 19 24 18 14 64 58 2 35 43 39 37 80 8 83 23 3 4 46 66 44 45 15 79 71 69 89 31 33 7 41 59 6 42 70 25 60 10 32 67 99 51 30 87 77 91 76 62 90 49 48 97 11 68 9 63 93 98 47 57 94 73 50 17 88 54 72 1 81 36 92 29 13 74 61 55 85 28 78 40 38 5 84 86"

# 500
# NBR="441 408 291 47 370 299 348 394 481 199 382 70 33 440 179 78 163 401 191 453 282 118 67 30 113 289 312 346 59 86 135 231 69 225 112 439 339 92 409 308 97 240 77 74 106 303 145 25 65 165 45 448 274 302 9 11 336 402 415 407 99 286 422 53 255 399 169 141 122 210 205 16 244 470 88 139 400 288 130 495 404 188 452 350 354 55 147 428 482 457 100 328 208 496 310 272 40 294 250 236 461 155 483 49 189 211 368 246 83 63 124 226 204 7 287 187 387 376 6 464 238 127 252 37 125 197 488 396 198 19 265 397 107 411 477 32 285 98 284 72 474 158 266 369 317 469 352 108 217 275 54 133 5 176 458 172 423 361 79 293 484 194 271 2 102 167 251 320 20 340 186 209 403 68 359 171 298 89 383 420 485 148 144 85 41 10 81 230 24 353 330 80 374 264 185 281 136 335 258 499 459 8 182 62 190 95 213 309 149 438 410 343 228 234 500 262 431 413 207 196 103 150 28 471 50 224 327 195 442 261 360 304 181 138 168 134 18 319 253 356 129 435 64 256 56 159 398 143 111 174 160 315 332 473 201 306 26 110 131 166 87 132 48 220 364 90 152 314 436 245 347 269 164 233 61 57 391 338 114 406 324 479 270 450 177 497 227 29 249 232 446 14 489 151 21 243 377 460 44 445 465 463 414 192 494 333 367 223 273 493 175 101 34 254 362 371 295 84 380 153 39 337 443 96 290 46 193 355 180 462 142 384 157 389 449 73 292 341 283 305 395 363 222 38 13 342 276 433 82 385 121 91 12 279 257 120 52 424 386 366 316 94 183 263 388 451 267 318 202 17 323 277 307 444 237 492 58 417 372 427 216 334 66 358 313 447 345 487 219 379 454 300 221 76 184 480 215 51 468 268 426 491 416 75 311 156 71 437 456 123 455 278 419 178 1 322 351 214 42 247 229 325 329 170 392 297 296 93 357 498 490 248 4 31 22 105 206 43 466 15 115 109 390 344 373 393 418 27 365 35 3 140 432 326 23 280 430 36 161 434 381 218 259 200 429 146 203 476 137 375 119 467 378 331 104 173 116 412 242 301 405 60 475 421 260 239 162 128 154 472 349 478 486 117 321 235 425 212 126 241"
# NBR="309 131 426 7 423 46 248 132 352 311 477 312 488 47 331 93 176 498 391 432 218 414 392 207 280 300 225 69 467 133 237 434 417 128 478 324 453 254 162 378 137 223 142 329 54 406 327 303 45 144 418 30 55 224 485 33 140 368 17 297 221 337 36 390 60 458 115 114 102 120 446 187 377 353 40 178 183 475 109 138 200 401 495 440 345 168 285 181 226 472 141 6 16 410 272 64 101 106 299 240 342 28 420 143 78 281 258 361 442 344 457 212 282 455 160 479 31 251 195 161 66 314 462 469 407 307 27 447 385 203 41 474 316 192 290 165 44 24 216 308 206 56 228 396 108 262 421 441 163 306 86 174 460 172 87 305 424 270 454 219 293 35 205 134 72 209 384 57 369 471 182 269 20 4 90 500 201 214 39 68 156 235 382 243 89 338 494 334 386 328 330 486 158 480 400 268 130 355 189 278 232 343 245 383 492 118 155 247 298 244 339 51 483 317 136 34 347 213 239 379 197 21 301 429 52 333 389 404 372 210 461 448 146 381 42 127 358 376 419 107 459 32 436 350 341 260 267 496 256 196 287 321 238 63 122 110 398 380 348 276 67 466 147 393 279 177 50 430 83 491 164 456 310 273 373 364 18 336 5 13 452 82 113 366 318 198 105 3 370 65 250 286 94 129 428 252 493 217 49 292 62 11 92 100 394 227 190 175 340 266 169 315 402 99 356 26 451 188 58 152 411 98 415 413 253 202 304 294 180 8 37 59 409 80 438 233 151 211 445 449 43 88 157 450 73 283 149 374 261 499 96 231 116 323 271 22 53 95 19 332 360 135 15 259 489 204 264 295 61 85 125 215 397 179 112 288 487 236 395 443 185 476 482 153 230 284 199 246 484 388 375 74 399 291 79 435 490 302 296 154 241 184 139 349 91 277 367 220 464 463 371 9 325 465 405 425 249 23 481 412 222 1 48 335 431 408 186 121 173 167 320 150 403 362 10 166 433 365 387 14 473 346 263 265 111 242 193 123 274 427 468 313 289 354 470 29 255 171 103 119 444 25 170 76 104 357 75 97 2 437 12 416 191 84 124 126 497 363 117 70 194 351 38 234 275 159 208 359 322 229 257 81 422 145 71 326 148 439 77 319"

# NBR=$(seq 1 $NBR_COUNT | tr '\n' ' ' | rev | cut -c 2- | rev)
CMD=$( ./push_swap $NBR)
NBR_LINK=$( echo "$NBR" | tr ' ' ',' )
CMD_LINK=$( echo "$CMD" | sed -e"s/rra/g/g" -e"s/rrb/h/g" \
-e"s/rrr/i/g" -e"s/sa/a/g" -e"s/sb/b/g" -e"s/ss/c/g" \
-e"s/ra/d/g" -e"s/rb/e/g" -e"s/rr/f/g"  -e"s/pa/j/g" -e"s/pb/k/g" | tr -d '\n')
CMD_COUNT=${#CMD_LINK}
RESULT=$( echo $CMD | ./checker* $NBR )
echo "Operations: $CMD_COUNT"
echo "Result $RESULT"
open "https://kaaaaakun.github.io/push-swap-pain/?&nbr=$NBR_LINK&cmd=$CMD_LINK"


##########################################
# ARG="24 18 27 8 10 23 22 7 6 29 2 3 25 30 26 9 21 4 13 17 1 16 28 14 11 19 12 5 15 20"; ./push_swap $ARG | ./checker $ARG
# ARG="24 18 27 8 10 23 22 "; ./push_swap $ARG | ./kari_checker $ARG
# ARG="24 18 27 22 "; ./push_swap $ARG | ./kari_checker $ARG
#
# 22 81 9 36 14 96 37 62 12 72 38 52 21 10 59 94 51 67 35 29 65 79 75 27 98 5 69 66 7 60 50 46 25 55 39 78 99 13 44 18 56 2 19 42 85 1 43 3 32 63 53 16 73 40 31 83 23 45 4 49 58 41 30 47 11 28 54 24 34 17 82 8 84 77 6 15 26 86 88 92 48 71 33 89 64 76 70 95 80 74 93 61 68 91 57 100 20 97 87 90
# 56 113 8 112 183 72 91 167 61 123 69 33 90 105 27 171 177 143 58 22 83 87 181 155 148 179 144 37 124 32 175 160 137 191 104 82 188 174 184 46 146 94 40 20 103 189 9 169 7 57 11 43 125 45 109 157 29 75 18 48 186 71 173 195 6 100 132 76 13 130 21 80 24 81 42 15 149 55 66 114 158 79 120 53 199 193 180 26 187 84 151 121 52 147 156 164 153 34 111 194 31 85 122 44 127 115 182 133 101 10 185 176 38 135 200 128 86 89 98 73 116 65 41 142 17 49 165 102 190 54 23 14 117 96 60 118 92 47 198 168 19 70 107 59 129 88 136 139 1 140 25 67 5 166 178 119 154 36 159 197 62 145 163 138 131 172 35 2 150 108 152 50 64 192 110 78 39 12 93 63 134 97 99 106 28 77 30 162 141 3 74 126 4 95 196 161 51 16 170 68
# ARG=(`python3 -c 'import random; print(*random.sample(range(500),3))'`)

